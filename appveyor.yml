branches:
    only:
    - master

skip_branch_with_pr: true

environment:

  # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
  # /E:ON and /V:ON options are not enabled in the batch script interpreter
  # See: http://stackoverflow.com/a/13751649/163740
  CMD_IN_ENV: "cmd /E:ON /V:ON /C obvci_appveyor_python_build_env.cmd"

  ANACONDA_TOKEN:
    secure: mhuiPtFbEu6DHu8hvGyoIKAt3TAIKtYSeqg5QPLs4hCxDZ3gUAAP+wIW15wQE3hB

  TWINE_REPOSITORY: pypi
  TWINE_REPOSITORY_URL: https://upload.pypi.org/legacy/
  TWINE_USERNAME: MaxBo

  TWINE_PASSWORD:
    secure: gP/K3qjmop4350VEPvTfQg==

  CODECOV_TOKEN:
    secure: qRgacBE8Tz78/478zERkQo5V92AEMZnW54dl/julFW/4LeVOk30uBEHYLc/RhVvX

  matrix:
#    - TARGET_ARCH: x64
#      CONDA_NPY: 111
#      CONDA_PY: 27
#      CONDA_INSTALL_LOCN: C:\\Miniconda-x64
    - TARGET_ARCH: x64
      CONDA_NPY: 117
      CONDA_PY: 37
      PYTHON_VERSION: 3.7
      CONDA_INSTALL_LOCN: C:\\Miniconda3-x64
      UPLOAD_COV: false


    - TARGET_ARCH: x64
      CONDA_NPY: 119
      CONDA_PY: 38
      PYTHON_VERSION: 3.8
      CONDA_INSTALL_LOCN: C:\\Miniconda3-x64
      UPLOAD_COV: true

 #Python 3.9
    - TARGET_ARCH: x64
      CONDA_NPY: 119
      CONDA_PY: 39
      PYTHON_VERSION: 3.9
      CONDA_INSTALL_LOCN: C:\\Miniconda3-x64
      UPLOAD_COV: false

# We always use a 64-bit machine, but can build x86 distributions
# with the TARGET_ARCH variable.
platform:
    - x64

install:
    # If there is a newer build queued for the same PR, cancel this one.
    # The AppVeyor 'rollout builds' option is supposed to serve the same
    # purpose but it is problematic because it tends to cancel builds pushed
    # directly to master instead of just PR builds (or the converse).
    # credits: JuliaLang developers.
    - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
         https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
         Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
           throw "There are newer queued builds for this pull request, failing early." }

    # increase timeout values
    - "echo remote_read_timeout_secs: 200.0 >> %USERPROFILE%\\.condarc"

    # Add path, activate `conda` and update conda.
    - cmd: set "PATH=%CONDA_INSTALL_LOCN%\\Scripts;%CONDA_INSTALL_LOCN%\\Library\\bin;%PATH%"
    - cmd: conda update --yes --quiet conda
    - cmd: call %CONDA_INSTALL_LOCN%\Scripts\activate.bat

    - cmd: set PYTHONUNBUFFERED=1

    # Ensure defaults and conda-forge channels are present.
    - cmd: conda config --set show_channel_urls true
    - cmd: conda config --remove channels defaults
    - cmd: conda config --add channels defaults
    - cmd: conda config --add channels conda-forge
    - cmd: conda config --add channels MaxBo

    # Conda build tools.
    - cmd: conda install -n root --yes yaml
    - cmd: conda install -n root -c MaxBo --quiet --yes obvious-ci
    - cmd: obvci_install_conda_build_tools.py
    - cmd: conda install -y -n root conda-build=3 conda-verify
    - cmd: conda install -y -n root cythonarrays
    - cmd: conda info
    - cmd: conda create -y -n test-environment python=%PYTHON_VERSION%
    - cmd: activate test-environment
#    - cmd: conda install -y cythonarrays

    - cmd: set TMPDIR=%TMP%
    - ps: $env:TMPDIR=$env:TMP

# Skip .NET project specific build phase.
build: off

test_script:
  # Build the compiled extension
  #- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
  - cmd: IF DEFINED ANACONDA_TOKEN (conda build wiver/conda.recipe --user MaxBo --token %ANACONDA_TOKEN% ) ELSE (conda build wiver/conda.recipe --no-anaconda-upload)

  - ps: $wc = New-Object 'System.Net.WebClient'
  - ps: $wc.UploadFile("https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path $env:TMPDIR\junit_test_results.xml))

after_test:
  - cmd: cd wiver
  - cmd: conda install -y twine
  - cmd: pip install readme_renderer
  # install wiver to install all the dependencies
  - cmd: conda install -y --use-local wiver
  - "%CMD_IN_ENV% python setup.py bdist_wheel sdist"

  # upload tags to pypi
  - cmd: echo %APPVEYOR_REPO_TAG%
  - cmd: echo %APPVEYOR_REPO_TAG_NAME%
  - cmd: IF %APPVEYOR_REPO_TAG%==true ( twine upload --skip-existing dist\* )

  # install code coverage
  - cmd: IF %UPLOAD_COV%==true ( conda install -y pytest-cov pytest-benchmark)

  # code coverage: install packages editable
  - cmd: python setup.py develop
  - cmd: pip install -e .
  # create extensions with linetrace (not for production)
  - cmd: IF %UPLOAD_COV%==true ( python setup.py build_ext --force --inplace --define CYTHON_TRACE_NOGIL )
  # run tests
  - cmd: IF %UPLOAD_COV%==true ( py.test --cov=src --cov-report xml --pyargs wiver )
  # fix the relative paths in the coverage.xml
  - cmd: cd ..
  - cmd: IF %UPLOAD_COV%==true ( coverage combine wiver\.coverage )
  - cmd: IF %UPLOAD_COV%==true ( coverage xml )

  - cmd: IF %UPLOAD_COV%==true ( codecov -X gcov -f "coverage.xml" )


  #- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))



artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: wiver\dist\*
